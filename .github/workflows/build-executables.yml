# Name for your workflow
name: Build Python Executables

# This workflow runs on any push to the 'main' branch
on:
push:
  branches: [ "main" ]

jobs:
# --- JOB 1: BUILD FOR WINDOWS ---
build-windows:
  runs-on: windows-latest

  steps:
    # Step 1: Check out your repository code
    - name: Check out code
      uses: actions/checkout@v4

    # Step 2: Set up the specified version of Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # IMPORTANT: Match your project's Python version

    # Step 3: Set up Node.js (because of Puppeteer)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Step 4: Install both Python and Node.js dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        npm install

    # Step 5: Run PyInstaller to build the .exe
    # IMPORTANT: Main script changed to liveServer.py and --windowed removed
    # Note the use of ';' for the --add-data path on Windows
    - name: Build Windows executable
      run: pyinstaller --onefile --name="xPedite" --add-data "templates;templates" liveServer.py

    # Step 6: Upload the final .exe file as a downloadable artifact
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: xPedite-Windows
        path: dist/xPedite.exe

# --- JOB 2: BUILD FOR MACOS ---
build-macos:
  runs-on: macos-latest

  steps:
    # Steps are similar to Windows
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        npm install

    # Step 5: Run PyInstaller to build the .app bundle
    # IMPORTANT: Main script changed to liveServer.py and --windowed removed
    # Note the use of ':' for the --add-data path on macOS
    - name: Build macOS application
      run: pyinstaller --onefile --name="xPedite" --add-data "templates:templates" liveServer.py

    # Step 6: Zip the .app bundle before uploading
    - name: Zip the .app
      run: zip -r xPedite-macOS.zip dist/xPedite.app

    # Step 7: Upload the final .zip file as a downloadable artifact
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: xPedite-macOS
        path: xPedite-macOS.zip